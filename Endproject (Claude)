// Create the main scene function that will contain all our 3D elements
const createScene = function () {
    const scene = new BABYLON.Scene(engine);
    
    // Setup camera with arc-rotate type (orbits around a target)
    // Parameters: name, alpha (rotation), beta (elevation), radius, target position, scene
    const camera = new BABYLON.ArcRotateCamera("camera", 0, Math.PI / 2, 20, BABYLON.Vector3.Zero(), scene);
    camera.attachControl(canvas, true);  // Enable camera controls with mouse/touch
    camera.lowerRadiusLimit = 0.01;     // Minimum zoom distance
    camera.upperRadiusLimit = 100;      // Maximum zoom distance
    camera.wheelPrecision = 100;        // Mouse wheel sensitivity
    camera.pinchPrecision = 100;        // Touch pinch sensitivity
    camera.panningSensibility = 0;      // Disable panning
    camera.useBouncingBehavior = false; // Disable bounce at zoom limits

    // Create a point light source at the center (sun position)
    const light = new BABYLON.PointLight("sunLight", BABYLON.Vector3.Zero(), scene);
    light.intensity = 2;  // Make the light brighter than default

    // Create the sun with emissive material (self-illuminating)
    const sunMaterial = new BABYLON.StandardMaterial("sunMaterial", scene);
    sunMaterial.emissiveColor = new BABYLON.Color3(1, 1, 0);  // Yellow glowing color
    const sun = BABYLON.MeshBuilder.CreateSphere("sun", {diameter: 1391}, scene);
    sun.material = sunMaterial;

    // Define properties for each planet:
    // - size: relative diameter
    // - orbit: distance from sun
    // - color: RGB color values
    // - period: orbital period in Earth days
    const planets = [
        {name: "Mercury", size: 4.879, orbit: 4, color: new BABYLON.Color3(0.5, 0.5, 0.5), period: 88},
        {name: "Venus", size: 12.104, orbit: 7, color: new BABYLON.Color3(0.9, 0.7, 0.4), period: 225},
        {name: "Earth", size: 12.742, orbit: 10, color: new BABYLON.Color3(0.2, 0.4, 0.9), period: 365},
        {name: "Mars", size: 6.779, orbit: 15, color: new BABYLON.Color3(0.9, 0.3, 0.1), period: 687},
        {name: "Jupiter", size: 139.820, orbit: 26, color: new BABYLON.Color3(0.8, 0.7, 0.5), period: 4333},
        {name: "Saturn", size: 116.460, orbit: 38, color: new BABYLON.Color3(0.9, 0.8, 0.6), period: 10759},
        {name: "Uranus", size: 50.742, orbit: 49, color: new BABYLON.Color3(0.5, 0.7, 0.9), period: 30687},
        {name: "Neptune", size: 49.224, orbit: 60, color: new BABYLON.Color3(0.2, 0.3, 0.9), period: 60190}
    ];

    // Create all planets and their orbits
    const planetMeshes = planets.map(planet => {
        // Create material with planet's color
        const planetMaterial = new BABYLON.StandardMaterial(planet.name + "Material", scene);
        planetMaterial.diffuseColor = planet.color;
        
        // Create sphere for planet
        const planetMesh = BABYLON.MeshBuilder.CreateSphere(planet.name, {diameter: planet.size}, scene);
        planetMesh.material = planetMaterial;
        
        // Place planet at random position in its orbit
        const angle = Math.random() * Math.PI * 2;
        planetMesh.position.x = planet.orbit * Math.cos(angle);
        planetMesh.position.z = planet.orbit * Math.sin(angle);

        // Create visible orbit line using points in a circle
        const orbitLine = BABYLON.MeshBuilder.CreateLines("orbitLine", {
            points: (() => {
                const points = [];
                for (let i = 0; i <= 100; i++) {
                    const a = (i / 100) * Math.PI * 2;
                    points.push(new BABYLON.Vector3(
                        planet.orbit * Math.cos(a),
                        0,
                        planet.orbit * Math.sin(a)
                    ));
                }
                return points;
            })()
        }, scene);
        orbitLine.color = planet.color;

        // Create floating label above each planet
        const label = new BABYLON.GUI.Rectangle("label for " + planet.name);
        label.background = "black";
        label.height = "30px";
        label.alpha = 0.5;
        label.width = "100px";
        label.cornerRadius = 20;
        label.thickness = 1;
        label.linkOffsetY = -20;

        const text = new BABYLON.GUI.TextBlock();
        text.text = planet.name;
        text.color = "white";
        label.addControl(text);

        const advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");
        advancedTexture.addControl(label);
        label.linkWithMesh(planetMesh);  // Make label follow planet

        return planetMesh;
    });

    // Animation loop for planet orbits
    scene.onBeforeRenderObservable.add(() => {
        planets.forEach((planet, index) => {
            const planetMesh = planetMeshes[index];
            // Calculate orbital speed based on planet's period (slower period = slower speed)
            const orbitSpeed = (1 / planet.period) * 2 * Math.PI / 600;
            // Get current angle and calculate new position
            const currentAngle = Math.atan2(planetMesh.position.z, planetMesh.position.x);
            const newAngle = currentAngle + orbitSpeed;
            planetMesh.position.x = planet.orbit * Math.cos(newAngle);
            planetMesh.position.z = planet.orbit * Math.sin(newAngle);
        });
    });

    // Create player-controlled rocket
    const rocketMaterial = new BABYLON.StandardMaterial("rocketMaterial", scene);
    rocketMaterial.diffuseColor = new BABYLON.Color3(1, 0, 0);  // Red color
    const rocket = BABYLON.MeshBuilder.CreateCylinder("rocket", {height: 0.02, diameter: 0.005}, scene);
    rocket.material = rocketMaterial;
    rocket.position = new BABYLON.Vector3(10, 0, 0);  // Start near Earth's orbit
    rocket.rotation.z = Math.PI / 2;  // Point rocket sideways initially

    // Prevent rocket from becoming too small to see when far away
    rocket.minScaleFactorX = 0.1;
    rocket.minScaleFactorY = 0.1;
    rocket.minScaleFactorZ = 0.1;

    // Make camera follow the rocket
    camera.lockedTarget = rocket;

    // Control state variables for rocket movement
    let moveForward = false;
    let moveForwardFast = false;
    let rotateUp = false;
    let rotateDown = false;
    let rotateLeft = false;
    let rotateRight = false;

    // Setup keyboard controls
    // WASD: Rotation
    // Space: Move forward
    // Shift: Move forward faster
    scene.onKeyboardObservable.add((kbInfo) => {
        switch (kbInfo.type) {
            case BABYLON.KeyboardEventTypes.KEYDOWN:
                switch (kbInfo.event.key) {
                    case "w": rotateUp = true; break;
                    case "s": rotateDown = true; break;
                    case "a": rotateLeft = true; break;
                    case "d": rotateRight = true; break;
                    case " ": moveForward = true; break;
                    case "Shift": moveForwardFast = true; break;
                }
                break;
            case BABYLON.KeyboardEventTypes.KEYUP:
                switch (kbInfo.event.key) {
                    case "w": rotateUp = false; break;
                    case "s": rotateDown = false; break;
                    case "a": rotateLeft = false; break;
                    case "d": rotateRight = false; break;
                    case " ": moveForward = false; break;
                    case "Shift": moveForwardFast = false; break;
                }
                break;
        }
    });

    // Constants for rocket movement
    const rotationSpeed = 0.02;
    const movementSpeed = 0.005;
    const fastMovementSpeed = 0.02;
    const initialRocketPosition = new BABYLON.Vector3(10, 0, 0);

    // Updates rocket position and handle collisions
    scene.onBeforeRenderObservable.add(() => {
        // Handles forward movement
        if (moveForward || moveForwardFast) {
            const speed = moveForwardFast ? fastMovementSpeed : movementSpeed;
            const forwardVector = new BABYLON.Vector3(0, 1, 0);
            const rotatedForwardVector = BABYLON.Vector3.TransformNormal(forwardVector, rocket.getWorldMatrix());
            rocket.position.addInPlace(rotatedForwardVector.scale(speed));
        }
        
        // Handles rotation
        if (rotateUp) rocket.rotate(BABYLON.Axis.Z, -rotationSpeed, BABYLON.Space.LOCAL);
        if (rotateDown) rocket.rotate(BABYLON.Axis.Z, rotationSpeed, BABYLON.Space.LOCAL);
        if (rotateLeft) rocket.rotate(BABYLON.Axis.X, -rotationSpeed, BABYLON.Space.LOCAL);
        if (rotateRight) rocket.rotate(BABYLON.Axis.X, rotationSpeed, BABYLON.Space.LOCAL);

        // Checks for collisions with planets and prevent intersection
        planetMeshes.forEach(planetMesh => {
            const distance = BABYLON.Vector3.Distance(rocket.position, planetMesh.position);
            const planetRadius = planetMesh.scaling.x / 2;
            if (distance <= planetRadius + 0.01) {
                // Push rocket away from planet surface
                const awayVector = rocket.position.subtract(planetMesh.position).normalize();
                rocket.position = planetMesh.position.add(awayVector.scale(planetRadius + 0.01));
            }
        });

        // Reset rocket if it hits the sun
        const distanceToSun = BABYLON.Vector3.Distance(rocket.position, BABYLON.Vector3.Zero());
        if (distanceToSun <= 1) {  // Sun radius is 1
            rocket.position = initialRocketPosition.clone();
            rocket.rotation = new BABYLON.Vector3(0, 0, Math.PI / 2);
        }
    });

    return scene;
};
