const createScene = function () {
    const scene = new BABYLON.Scene(engine); 
// Create a new scene using the engine
    
    const camera = new BABYLON.ArcRotateCamera("camera1", Math.PI / 2, Math.PI / 3, 30, new BABYLON.Vector3(0, 0, 0), scene); 
// Creates an ArcRotateCamera that orbits around the scene, starting at a distance of 30 and looking at the origin (0,0,0)

    camera.attachControl(canvas, true); 
// Attaches camera controls to the canvas, allowing user interaction with the camera

    const light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);
    light.intensity = 0.8; 
// Addd a hemispheric light, which illuminates from above (y = 1)
// Sets the light intensity to 0.8, making it a bit dimmer than the default

    const centralPlanet = BABYLON.MeshBuilder.CreateSphere("centralPlanet", { diameter: 4 }, scene); // Creates a central sphere (planet) with a diameter of 4 units
    centralPlanet.material = new BABYLON.StandardMaterial("centralMaterial", scene); // Assigns a standard material to the central planet
    centralPlanet.material.diffuseColor = new BABYLON.Color3(1, 0.8, 0); // Sets the colour of the central planet to a yellowish tone

    const orbitingPlanet = BABYLON.MeshBuilder.CreateSphere("orbitingPlanet", { diameter: 1 }, scene); // Creates a smaller sphere (orbiting planet) with a diameter of 1 unit
    orbitingPlanet.material = new BABYLON.StandardMaterial("orbitingMaterial", scene); // Assigns a standard material to the orbiting planet
    orbitingPlanet.material.diffuseColor = new BABYLON.Color3(0, 0.5, 1); // Sets the colour of the orbiting planet to a shade of blue

    const orbitRadius = 10; // Defines the radius of the orbit for the smaller planet (circular motion)
    orbitingPlanet.position.x = orbitRadius; // Sets the start position x of the orbiting planet to 10 units along the x-axis

    scene.registerBeforeRender(() => { // A function that runs before each render to update the orbiting planet's position
        const time = performance.now() * 0.001; // Obtains the current time in seconds (scaled down by 1000)
        const rotationSpeed = 0.5; // Sets the speed at which the orbiting planet circles the central planet

        orbitingPlanet.position.x = Math.cos(time * rotationSpeed) * orbitRadius; // Updates the x position of the orbiting planet using cosine for circular motion
        orbitingPlanet.position.z = Math.sin(time * rotationSpeed) * orbitRadius; // Updates the z position using sine for circular motion.
    });

    return scene; // Return the scene object created
};

const scene = createScene(); // Call createScene to generate the scene

engine.runRenderLoop(function () { // Register a loop to continuously render the scene, updating each frame
    scene.render(); // Render the scene
});

window.addEventListener("resize", function () { // Add an event listener for window resizing
    engine.resize(); // Adjust the engine's rendering dimensions when the window resizes
});



